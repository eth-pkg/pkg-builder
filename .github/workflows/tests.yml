name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  unit_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Sbuild setup
        run: |
          sudo apt-get update
          # Note this is an older version of sbuild, no need to patch it, yet
          sudo apt install -y debhelper schroot ubuntu-dev-tools piuparts
          sudo apt-get -y install pkg-config libssl-dev uidmap
          sudo apt-get install -y libfilesys-df-perl libmime-lite-perl
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
          sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true
          sudo sbuild-adduser `whoami`
      - name: Build
        run: cargo build --verbose

      - name: Run unit tests
        run: cargo test --lib --verbose

  bookworm_amd64_packaging:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language:
          - c
          - dotnet
          - go
          - java
          - java-gradle
          - javascript
          - nim
          - rust
          - typescript
          - virtual
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sbuild setup
        run: |
          sudo apt-get update
          # Note this is an older version of sbuild, no need to patch it, yet
          sudo apt install -y debhelper schroot ubuntu-dev-tools piuparts autopkgtest vmdb2 qemu-system-x86
          sudo apt-get install -y pkg-config libssl-dev uidmap
          sudo apt-get install -y libfilesys-df-perl libmime-lite-perl
          # change this into actually built version and cache it
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
          sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true

      - name: Build
        run: |
          cargo build --verbose

      - name: Install
        run: |
          cargo build --release
          mkdir -p ${HOME}/.local/bin
          mv target/release/pkg-builder ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/pkg-builder
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install debcrafter
        run: |
          wget -q https://github.com/eth-pkg/pkg-builder/releases/download/v0.1/debcrafter
          mkdir -p ${HOME}/.local/bin
          mv debcrafter ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/debcrafter
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Create chroot env
        run: |
          cd examples/bookworm/${{matrix.language}}/hello-world
          pkg-builder env create
          echo "${HOME}/.cache/sbuild/bookworm-amd64.tar.gz" >> $GITHUB_PATH

      - name: package
        run: |
          cd examples/bookworm/${{matrix.language}}/hello-world
          pkg-builder package --run-piuparts false  --run-autopkgtest false


      - name: piuparts
        run: |
          # installing debian-archive-keyring fails on ubuntu LTS, not sure why, but it says it is already installed
          # sudo apt-get install -y debian-archive-keyring
          cd examples/bookworm/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder piuparts

      - name: autopkgtest
        run: |
          sudo cp -R ${HOME}/.pkg-builder /root
          apt list --installed autopkgtest
          cd examples/bookworm/${{matrix.language}}/hello-world
          sudo ${HOME}/.local/bin/pkg-builder autopkgtest


      - name: verify
        run: |
          cd examples/bookworm/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder verify  --no-package true

      - name: Env variables
          id: env
          run: |
            FOLDER=examples/bookworm/${{matrix.language}}/hello-world
            # Extract the second and third directories from the tag name
            CODENAME=bookworm
            ARCH=amd64
            PACKAGE_NAME=hello-world
            VERSION_NUMBER=1.0.0-1
            VERSION_NUMBER_WITHOUT_REVISON=1.0.0
            BUILD_DIR=$(echo "/home/runner/.pkg-builder/packages/$CODENAME/$PACKAGE_NAME-$VERSION_NUMBER")
        
        
            # Write outputs to GITHUB_OUTPUT environment file
            echo "codename=$CODENAME" >> $GITHUB_OUTPUT
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "folder=$FOLDER" >> $GITHUB_OUTPUT
            echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON" >> $GITHUB_OUTPUT
            echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
            echo "arch=$ARCH" >> $GITHUB_OUTPUT

            # values 
            echo "folder=$FOLDER"
            echo "codename=$CODENAME"
            echo "arch=$ARCH"
            echo "package_name=$PACKAGE_NAME"
            echo "version_number=$VERSION_NUMBER"
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON"
            echo "build_dir=$BUILD_DIR"

            deb_file=$(find ${{ github.workspace }}/build -name 'dotnet-sdk-*.deb' | head -n 1)
            echo "deb_file::${deb_file}"
        
        - name: Save dotnet.deb
          if: steps.env.outputs.deb_file != ''
          uses: actions/upload-artifact@v2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            path: ${{ steps.env.outputs.debfile }}
            name: dotnet.deb



  jammy_amd64_packaging:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language:
          - c
          - dotnet
          - go
          - java
          - java-gradle
          - javascript
          - nim
          - rust
          - typescript
          - virtual
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sbuild setup
        run: |
          sudo apt-get update
          # Note this is an older version of sbuild, no need to patch it, yet
          sudo apt install -y debhelper schroot ubuntu-dev-tools piuparts autopkgtest vmdb2 qemu-system-x86
          sudo apt-get install -y pkg-config libssl-dev uidmap
          sudo apt-get install -y libfilesys-df-perl libmime-lite-perl
          sudo apt-get install -y genisoimage
          # change this into actually built version and cache it
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
          sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true

      - name: Build
        run: |
          cargo build --verbose

      - name: Install
        run: |
          cargo build --release
          mkdir -p ${HOME}/.local/bin
          mv target/release/pkg-builder ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/pkg-builder
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install debcrafter
        run: |
          wget -q https://github.com/eth-pkg/pkg-builder/releases/download/v0.1/debcrafter
          mkdir -p ${HOME}/.local/bin
          mv debcrafter ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/debcrafter
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Create chroot env
        run: |
          cd examples/jammy/${{matrix.language}}/hello-world
          pkg-builder env create
          echo "${HOME}/.cache/sbuild/noble-amd64.tar.gz" >> $GITHUB_PATH

      - name: package
        run: |
          cd examples/jammy/${{matrix.language}}/hello-world
          pkg-builder package --run-piuparts false --run-autopkgtest false


      - name: piuparts
        run: |
          # installing debian-archive-keyring fails on ubuntu LTS, not sure why, but it says it is already installed
          # sudo apt-get install -y debian-archive-keyring
          cd examples/jammy/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder piuparts

      - name: autopkgtest
        run: |
         sudo cp -R ${HOME}/.pkg-builder /root
         apt list --installed autopkgtest
         echo $AUTOPKGTEST_KEEP_APT_SOURCES
         echo $AUTOPKGTEST_APT_SOURCES_FILE
         cd examples/jammy/${{matrix.language}}/hello-world
         sudo ${HOME}/.local/bin/pkg-builder autopkgtest


      - name: verify
        run: |
          cd examples/jammy/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder verify --no-package true
  
      - name: Env variables
          id: env
          run: |
            FOLDER=examples/bookworm/${{matrix.language}}/hello-world
            # Extract the second and third directories from the tag name
            CODENAME=bookworm
            ARCH=amd64
            PACKAGE_NAME=hello-world
            VERSION_NUMBER=1.0.0-1
            VERSION_NUMBER_WITHOUT_REVISON=1.0.0
            BUILD_DIR=$(echo "/home/runner/.pkg-builder/packages/$CODENAME/$PACKAGE_NAME-$VERSION_NUMBER")
        
        
            # Write outputs to GITHUB_OUTPUT environment file
            echo "codename=$CODENAME" >> $GITHUB_OUTPUT
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "folder=$FOLDER" >> $GITHUB_OUTPUT
            echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON" >> $GITHUB_OUTPUT
            echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
            echo "arch=$ARCH" >> $GITHUB_OUTPUT

            # values 
            echo "folder=$FOLDER"
            echo "codename=$CODENAME"
            echo "arch=$ARCH"
            echo "package_name=$PACKAGE_NAME"
            echo "version_number=$VERSION_NUMBER"
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON"
            echo "build_dir=$BUILD_DIR"

            deb_file=$(find ${{ github.workspace }}/build -name 'dotnet-sdk-*.deb' | head -n 1)
            echo "deb_file::${deb_file}"
        
        - name: Save dotnet.deb
          if: steps.env.outputs.deb_file != ''
          uses: actions/upload-artifact@v2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            path: ${{ steps.env.outputs.debfile }}
            name: dotnet.deb


  noble_amd64_packaging:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language:
          - c
          - dotnet
          - go
          - java
          - java-gradle
          - javascript
          - nim
          - rust
          - typescript
          - virtual
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sbuild setup
        run: |
          sudo apt-get update
          # Note this is an older version of sbuild, no need to patch it, yet
          sudo apt install -y debhelper schroot ubuntu-dev-tools piuparts autopkgtest=5.20 vmdb2 qemu-system-x86
          sudo apt-get install -y pkg-config libssl-dev uidmap
          sudo apt-get install -y libfilesys-df-perl libmime-lite-perl
          sudo apt-get install -y genisoimage
          # change this into actually built version and cache it
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
          sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true
          sudo sbuild-adduser `whoami`
          newgrp sbuild

      - name: Build
        run: |
          cargo build --verbose

      - name: Install
        run: |
          cargo build --release
          mkdir -p ${HOME}/.local/bin 
          mv target/release/pkg-builder ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/pkg-builder
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install debcrafter
        run: |
          wget -q https://github.com/eth-pkg/pkg-builder/releases/download/v0.1/debcrafter
          mkdir -p ${HOME}/.local/bin 
          mv debcrafter ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/debcrafter
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Create chroot env
        run: |
          cd examples/noble/${{matrix.language}}/hello-world
          sudo sysctl -w kernel.unprivileged_userns_clone=1
          sudo ln -s /usr/share/debootstrap/scripts/gutsy /usr/share/debootstrap/scripts/noble
          # sudo ${HOME}/.local/bin/pkg-builder env create 
          # First will fail, try again
          #sudo cat /etc/subuid
          pkg-builder env create 
          echo "${HOME}/.cache/sbuild/noble-amd64.tar.gz" >> $GITHUB_PATH

      - name: package
        run: |
          cd examples/noble/${{matrix.language}}/hello-world
          pkg-builder package --run-piuparts false  --run-autopkgtest false


      - name: piuparts
        run: |
          # installing debian-archive-keyring fails on ubuntu LTS, not sure why, but it says it is already installed
          # sudo apt-get install -y debian-archive-keyring
          cd examples/noble/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder piuparts

      - name: autopkgtest
        run: |
         sudo cp -R ${HOME}/.pkg-builder /root
         apt list --installed autopkgtest
         cd examples/noble/${{matrix.language}}/hello-world
         sudo ${HOME}/.local/bin/pkg-builder autopkgtest


      - name: verify
        run: |
          cd examples/noble/${{matrix.language}}/hello-world
          ${HOME}/.local/bin/pkg-builder verify --no-package true 

      - name: Env variables
          id: env
          run: |
            FOLDER=examples/bookworm/${{matrix.language}}/hello-world
            # Extract the second and third directories from the tag name
            CODENAME=bookworm
            ARCH=amd64
            PACKAGE_NAME=hello-world
            VERSION_NUMBER=1.0.0-1
            VERSION_NUMBER_WITHOUT_REVISON=1.0.0
            BUILD_DIR=$(echo "/home/runner/.pkg-builder/packages/$CODENAME/$PACKAGE_NAME-$VERSION_NUMBER")
        
        
            # Write outputs to GITHUB_OUTPUT environment file
            echo "codename=$CODENAME" >> $GITHUB_OUTPUT
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "folder=$FOLDER" >> $GITHUB_OUTPUT
            echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON" >> $GITHUB_OUTPUT
            echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
            echo "arch=$ARCH" >> $GITHUB_OUTPUT

            # values 
            echo "folder=$FOLDER"
            echo "codename=$CODENAME"
            echo "arch=$ARCH"
            echo "package_name=$PACKAGE_NAME"
            echo "version_number=$VERSION_NUMBER"
            echo "version_number_without_revision=$VERSION_NUMBER_WITHOUT_REVISON"
            echo "build_dir=$BUILD_DIR"

            deb_file=$(find ${{ github.workspace }}/build -name 'dotnet-sdk-*.deb' | head -n 1)
            echo "deb_file::${deb_file}"
        
        - name: Save .deb
          if: steps.env.outputs.deb_file != ''
          uses: actions/upload-artifact@v2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            path: ${{ steps.env.outputs.debfile }}
            name: dotnet.deb